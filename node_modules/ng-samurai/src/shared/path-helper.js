"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
exports.getFileDirectoryPath = (filePath) => filePath.substring(0, filePath.lastIndexOf('/'));
function getModuleName(moduleFilePath) {
    const pathSegments = moduleFilePath.split('/');
    // the name is always the second last pathSegment
    return pathSegments[pathSegments.length - 2];
}
exports.getModuleName = getModuleName;
function convertModulePathToPublicAPIImport(modulePath) {
    const regex = /\/projects\/(.*)(\/)/;
    const pathSegments = regex.exec(modulePath);
    return pathSegments && pathSegments.length ? pathSegments[1] : '';
}
exports.convertModulePathToPublicAPIImport = convertModulePathToPublicAPIImport;
function getSourceRootPath(tree, projectName) {
    const workspaceAsBuffer = tree.read('angular.json');
    if (!workspaceAsBuffer) {
        throw new schematics_1.SchematicsException('Not and Angular CLI workspace');
    }
    const workspace = JSON.parse(workspaceAsBuffer.toString());
    const project = workspace.projects[projectName || workspace.defaultProject];
    if (project.projectType === 'application') {
        throw new schematics_1.SchematicsException('Ng-samurai works only for the "library" projects, please specify correct project using --project flag');
    }
    return project.sourceRoot;
}
exports.getSourceRootPath = getSourceRootPath;
function getLibRootPath(tree, projectName) {
    return `${getSourceRootPath(tree, projectName)}/lib`;
}
exports.getLibRootPath = getLibRootPath;
function getFolderPath(filePath) {
    return filePath.substring(0, filePath.lastIndexOf('/'));
}
exports.getFolderPath = getFolderPath;
function convertToAbsolutPath(filePath, importStringLiteral) {
    const levelsUp = getLevels(importStringLiteral);
    const filePathSegments = filePath.split('/');
    const folderPathAfterLevelsMove = filePathSegments
        .slice(0, filePathSegments.length - levelsUp - 1)
        .join('/');
    const pathAfterRelativeSegment = importStringLiteral.match(/\/[a-zA-Z0-9].*/);
    return `${folderPathAfterLevelsMove}${pathAfterRelativeSegment}`;
}
exports.convertToAbsolutPath = convertToAbsolutPath;
function resolvePath(filePath, pathChange) {
    const levelsUp = getLevels(pathChange);
    const filePathSegments = filePath.split('/');
    return filePathSegments.slice(0, filePathSegments.length - levelsUp).join('/');
}
exports.resolvePath = resolvePath;
function getLevels(importStringLiteral) {
    var _a;
    const numberOfDots = (_a = importStringLiteral.match(/[^a-zA-Z0-9]*/)[0].match(/\./g)) === null || _a === void 0 ? void 0 : _a.length;
    return Math.floor(numberOfDots / 2);
}
//# sourceMappingURL=path-helper.js.map