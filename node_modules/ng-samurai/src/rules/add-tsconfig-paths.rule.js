"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_helper_1 = require("../shared/log-helper");
function addTsconfigPaths() {
    return (tree) => {
        try {
            const tsconfig = JSON.parse(tree.read('tsconfig.json').toString());
            const angularJSON = JSON.parse(tree.read('angular.json').toString());
            const librayProjectNames = getLibraryProjectNames(angularJSON);
            if (!tsconfig.compilerOptions.paths) {
                tsconfig.compilerOptions.paths = {};
            }
            librayProjectNames.forEach((libraryProjectName) => {
                tsconfig.compilerOptions.paths[`${libraryProjectName}/*`] = [
                    `projects/${libraryProjectName}/*`,
                    `projects/${libraryProjectName}`
                ];
            });
            tree.overwrite('tsconfig.json', JSON.stringify(tsconfig, null, 2));
        }
        catch (e) {
            log_helper_1.logError(`Something went wrong while ng-samurai tried to update your tsconfig.json, ${e.toString()}`);
        }
    };
}
exports.addTsconfigPaths = addTsconfigPaths;
function getLibraryProjectNames(angularJSON) {
    return Object.values(angularJSON.projects)
        .filter((project) => project.projectType === 'library')
        .map((project) => project.root.split('/')[1]);
}
//# sourceMappingURL=add-tsconfig-paths.rule.js.map