"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const testing_1 = require("@angular-devkit/schematics/testing");
const schema_1 = require("@schematics/angular/application/schema");
const workspaceOptions = {
    name: 'some-workspace',
    newProjectRoot: 'projects',
    version: '8.0.0'
};
const appOptions = {
    name: 'some-app',
    inlineStyle: false,
    inlineTemplate: false,
    routing: false,
    style: schema_1.Style.Css,
    skipTests: false,
    skipPackageJson: false
};
const libOptions = {
    name: 'some-lib'
};
const defaultOptions = {
    name: 'path/to/customer'
};
const collectionPath = path.join(__dirname, '../collection.json');
const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
let appTree;
describe('generate-subentry', () => {
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield runner
            .runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions)
            .toPromise();
        appTree = yield runner
            .runExternalSchematicAsync('@schematics/angular', 'library', libOptions, appTree)
            .toPromise();
        appTree = yield runner
            .runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree)
            .toPromise();
    }));
    it('should generate a CustomerComponent', () => __awaiter(void 0, void 0, void 0, function* () {
        const options = Object.assign({}, defaultOptions);
        const tree = yield runner.runSchematicAsync('generate-subentry', options, appTree).toPromise();
        expect(tree.files.includes('/projects/some-lib/src/lib/path/to/customer/customer.component.ts')).toBe(true);
    }));
    it('should generate a CustomerModule and add a CustomerComponent', () => __awaiter(void 0, void 0, void 0, function* () {
        const options = Object.assign({}, defaultOptions);
        const tree = yield runner.runSchematicAsync('generate-subentry', options, appTree).toPromise();
        expect(tree.files.includes('/projects/some-lib/src/lib/path/to/customer/customer.module.ts')).toBe(true);
        expect(tree
            .readContent('/projects/some-lib/src/lib/path/to/customer/customer.module.ts')
            .includes('CustomerComponent')).toBe(true);
    }));
    it('should export everything from public-api inside index.ts', () => __awaiter(void 0, void 0, void 0, function* () {
        const options = Object.assign({}, defaultOptions);
        const expectedContent = "export * from './public-api';\n";
        const tree = yield runner.runSchematicAsync('generate-subentry', options, appTree).toPromise();
        expect(tree.readContent('/projects/some-lib/src/lib/path/to/customer/index.ts')).toEqual(expectedContent);
    }));
    it('should export the CustomerComponent and the CustomerModule from public-api', () => __awaiter(void 0, void 0, void 0, function* () {
        const options = Object.assign({}, defaultOptions);
        const expectedContent = "export * from './customer.module';\nexport * from './customer.component';\n";
        const tree = yield runner.runSchematicAsync('generate-subentry', options, appTree).toPromise();
        expect(tree.readContent('/projects/some-lib/src/lib/path/to/customer/public-api.ts')).toEqual(expectedContent);
    }));
    it('should add a package.json with the generate-subentry config', () => __awaiter(void 0, void 0, void 0, function* () {
        const options = Object.assign({}, defaultOptions);
        const expectedContent = {
            ngPackage: {
                lib: {
                    entryFile: 'public-api.ts',
                    cssUrl: 'inline'
                }
            }
        };
        const tree = yield runner.runSchematicAsync('generate-subentry', options, appTree).toPromise();
        expect(JSON.parse(tree.readContent('/projects/some-lib/src/lib/path/to/customer/package.json'))).toEqual(expectedContent);
    }));
});
//# sourceMappingURL=index.spec.js.map