"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
function generateSubentry(_options) {
    return (tree, _context) => {
        const moduleSchematicsOptions = Object.assign({}, _options);
        const componentSchematicsOptions = Object.assign({}, _options);
        const workspaceAsBuffer = tree.read('angular.json');
        if (!workspaceAsBuffer) {
            throw new schematics_1.SchematicsException('Not and Angular CLI workspace');
        }
        const workspace = JSON.parse(workspaceAsBuffer.toString());
        const projectName = _options.project || workspace.defaultProject;
        const project = workspace.projects[projectName];
        if (project.projectType === 'application') {
            throw new schematics_1.SchematicsException('The "generateSubentry" schematics works only for the "library" projects, please specify correct project using --project flag');
        }
        const path = _options.path || `${project.sourceRoot}/lib`;
        const parsed = parse_name_1.parseName(path, _options.name);
        _options.name = parsed.name;
        const sourceTemplate = schematics_1.url(_options.filesPath || './files');
        const sourceTemplateParametrized = schematics_1.apply(sourceTemplate, [
            schematics_1.template(Object.assign(Object.assign({}, _options), core_1.strings)),
            schematics_1.move(parsed.path)
        ]);
        const rules = [schematics_1.mergeWith(sourceTemplateParametrized)];
        if (_options.generateModule || _options.generateComponent) {
            rules.push(schematics_1.externalSchematic('@schematics/angular', 'module', Object.assign(Object.assign({}, moduleSchematicsOptions), { project: projectName })));
        }
        if (_options.generateComponent) {
            rules.push(schematics_1.externalSchematic('@schematics/angular', 'component', Object.assign(Object.assign({}, componentSchematicsOptions), { project: projectName })));
        }
        return schematics_1.chain(rules);
    };
}
exports.generateSubentry = generateSubentry;
//# sourceMappingURL=index.js.map