"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const index_1 = require("../subentry/index");
const path_helper_1 = require("../shared/path-helper");
const add_tsconfig_paths_rule_1 = require("../rules/add-tsconfig-paths.rule");
const update_import_paths_rule_1 = require("../rules/update-import-paths.rule");
const update_subentry_public_api_rule_1 = require("../rules/update-public-api/update-subentry-public-api.rule");
const update_top_level_public_api_rule_1 = require("../rules/update-public-api/update-top-level-public-api.rule");
const log_helper_1 = require("../shared/log-helper");
function splitLib(_options) {
    log_helper_1.logWelcomeMessage();
    return (tree, _context) => {
        const libRootPath = path_helper_1.getLibRootPath(tree);
        const rules = [];
        const modulePaths = [];
        tree.getDir(libRootPath).visit(filePath => {
            if (filePath.endsWith('.ts')) {
                rules.push(update_import_paths_rule_1.updateImportPaths(filePath));
            }
            if (filePath.endsWith('module.ts')) {
                modulePaths.push(filePath);
                rules.push(index_1.generateSubentry({
                    name: path_helper_1.getModuleName(filePath),
                    filesPath: '../subentry/files',
                    path: path_helper_1.resolvePath(path_helper_1.getFolderPath(filePath), '..'),
                    generateComponent: false,
                    generateModule: false
                }));
                rules.push(update_subentry_public_api_rule_1.updateSubentryPublicAPI(filePath));
            }
        });
        rules.push(update_top_level_public_api_rule_1.updateTopLevelPublicAPI(modulePaths));
        rules.push(add_tsconfig_paths_rule_1.addTsconfigPaths());
        return schematics_1.chain(rules);
    };
}
exports.splitLib = splitLib;
//# sourceMappingURL=index.js.map