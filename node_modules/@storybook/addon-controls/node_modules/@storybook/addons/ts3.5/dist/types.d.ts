/// <reference types="webpack-env" />
import { HooksContext } from './hooks';
import { Addon } from './index';
export declare enum types {
    TAB = "tab",
    PANEL = "panel",
    TOOL = "tool",
    TOOLEXTRA = "toolextra",
    PREVIEW = "preview",
    NOTES_ELEMENT = "notes-element"
}
export declare type Types = types | string;
export declare function isSupportedType(type: Types): boolean;
export declare type StoryId = string;
export declare type StoryKind = string;
export declare type StoryName = string;
export declare type ViewMode = 'story' | 'docs';
export interface Parameters {
    fileName?: string;
    options?: OptionsParameter;
    layout?: 'centered' | 'fullscreen' | 'padded';
    docsOnly?: boolean;
    [key: string]: any;
}
export interface Args {
    [key: string]: any;
}
export interface ArgType {
    name?: string;
    description?: string;
    defaultValue?: any;
    [key: string]: any;
}
export interface ArgTypes {
    [key: string]: ArgType;
}
export interface StoryIdentifier {
    id: StoryId;
    kind: StoryKind;
    name: StoryName;
}
export declare type StoryContext = StoryIdentifier & {
    [key: string]: any;
    parameters: Parameters;
    args: Args;
    globalArgs: Args;
    hooks?: HooksContext;
};
export interface WrapperSettings {
    options: OptionsParameter;
    parameters: {
        [key: string]: any;
    };
}
export declare type Comparator<T> = ((a: T, b: T) => boolean) | ((a: T, b: T) => number);
export declare type StorySortMethod = 'configure' | 'alphabetical';
export interface StorySortObjectParameter {
    method?: StorySortMethod;
    order?: any[];
    locales?: string;
}
export declare type StorySortParameter = Comparator<any> | StorySortObjectParameter;
export interface OptionsParameter extends Object {
    storySort?: StorySortParameter;
    hierarchyRootSeparator?: string;
    hierarchySeparator?: RegExp;
    showRoots?: boolean;
    theme?: {
        base: string;
        brandTitle?: string;
    };
    [key: string]: any;
}
export declare type StoryGetter = (context: StoryContext) => any;
export declare type LegacyStoryFn<ReturnType = unknown> = (p?: StoryContext) => ReturnType;
export declare type ArgsStoryFn<ReturnType = unknown> = (a?: Args, p?: StoryContext) => ReturnType;
export declare type StoryFn<ReturnType = unknown> = LegacyStoryFn<ReturnType> | ArgsStoryFn<ReturnType>;
export declare type StoryWrapper = (getStory: StoryGetter, context: StoryContext, settings: WrapperSettings) => any;
export declare type MakeDecoratorResult = (...args: any) => any;
export interface AddStoryArgs<StoryFnReturnType = unknown> {
    id: StoryId;
    kind: StoryKind;
    name: StoryName;
    storyFn: StoryFn<StoryFnReturnType>;
    parameters: Parameters;
}
export interface ClientApiAddon<StoryFnReturnType = unknown> extends Addon {
    apply: (a: StoryApi<StoryFnReturnType>, b: any[]) => any;
}
export interface ClientApiAddons<StoryFnReturnType> {
    [key: string]: ClientApiAddon<StoryFnReturnType>;
}
export declare type ClientApiReturnFn<StoryFnReturnType> = (...args: any[]) => StoryApi<StoryFnReturnType>;
export interface StoryApi<StoryFnReturnType = unknown> {
    kind: StoryKind;
    add: (storyName: StoryName, storyFn: StoryFn<StoryFnReturnType>, parameters?: Parameters) => StoryApi<StoryFnReturnType>;
    addDecorator: (decorator: DecoratorFunction<StoryFnReturnType>) => StoryApi<StoryFnReturnType>;
    addParameters: (parameters: Parameters) => StoryApi<StoryFnReturnType>;
    [k: string]: string | ClientApiReturnFn<StoryFnReturnType>;
}
export declare type DecoratorFunction<StoryFnReturnType = unknown> = (fn: StoryFn<StoryFnReturnType>, c: StoryContext) => ReturnType<StoryFn<StoryFnReturnType>>;
export declare type DecorateStoryFunction<StoryFnReturnType = unknown> = (storyFn: StoryFn<StoryFnReturnType>, decorators: DecoratorFunction<StoryFnReturnType>[]) => StoryFn<StoryFnReturnType>;
export interface ClientStoryApi<StoryFnReturnType = unknown> {
    storiesOf(kind: StoryKind, module: NodeModule): StoryApi<StoryFnReturnType>;
    addDecorator(decorator: DecoratorFunction<StoryFnReturnType>): StoryApi<StoryFnReturnType>;
    addParameters(parameter: Parameters): StoryApi<StoryFnReturnType>;
}
declare type LoadFn = () => any;
declare type RequireContext = any;
export declare type Loadable = RequireContext | [RequireContext] | LoadFn;
export {};
