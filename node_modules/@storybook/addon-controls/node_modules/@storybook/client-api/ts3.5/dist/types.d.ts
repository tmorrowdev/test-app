import { Addon, StoryIdentifier, StoryFn, Parameters, Args, ArgTypes, StoryApi, DecoratorFunction, DecorateStoryFunction, StoryContext } from '@storybook/addons';
import StoryStore from './story_store';
import { HooksContext } from './hooks';
export interface ErrorLike {
    message: string;
    stack: string;
}
export interface StoryMetadata {
    parameters: Parameters;
    decorators: DecoratorFunction[];
}
export declare type ArgTypesEnhancer = (context: StoryContext) => ArgTypes;
export declare type AddStoryArgs = StoryIdentifier & {
    storyFn: StoryFn<any>;
    parameters?: Parameters;
    decorators?: DecoratorFunction[];
};
export declare type StoreItem = StoryIdentifier & {
    parameters: Parameters;
    getDecorated: () => StoryFn<any>;
    getOriginal: () => StoryFn<any>;
    storyFn: StoryFn<any>;
    hooks: HooksContext;
    args: Args;
};
export declare type PublishedStoreItem = StoreItem & {
    globalArgs: Args;
};
export interface StoreData {
    [key: string]: StoreItem;
}
export interface ClientApiParams {
    storyStore: StoryStore;
    decorateStory?: DecorateStoryFunction;
    noStoryModuleAddMethodHotDispose?: boolean;
}
export declare type ClientApiReturnFn<StoryFnReturnType> = (...args: any[]) => StoryApi<StoryFnReturnType>;
export { StoryApi, DecoratorFunction };
export interface ClientApiAddon<StoryFnReturnType = unknown> extends Addon {
    apply: (a: StoryApi<StoryFnReturnType>, b: any[]) => any;
}
export interface ClientApiAddons<StoryFnReturnType> {
    [key: string]: ClientApiAddon<StoryFnReturnType>;
}
export interface GetStorybookStory {
    name: string;
    render: StoryFn;
}
export interface GetStorybookKind {
    kind: string;
    fileName: string;
    stories: GetStorybookStory[];
}
export declare type RenderContext = StoreItem & {
    forceRender: boolean;
    showMain: () => void;
    showError: (error: {
        title: string;
        description: string;
    }) => void;
    showException: (err: Error) => void;
};
