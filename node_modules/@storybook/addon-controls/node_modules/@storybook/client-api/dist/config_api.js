"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint no-underscore-dangle: 0 */
var ConfigApi = function ConfigApi(_ref) {
  var _this = this;

  var storyStore = _ref.storyStore;

  _classCallCheck(this, ConfigApi);

  this._channel = void 0;
  this._storyStore = void 0;
  this._clearDecorators = void 0;
  this.clientApi = void 0;

  this.configure = function (loaders, module) {
    _this._storyStore.startConfiguring();

    try {
      loaders();

      _this._storyStore.clearError();
    } catch (err) {
      _this._storyStore.setError(err);
    }

    _this._storyStore.finishConfiguring();

    if (module.hot) {
      module.hot.accept(); // The generated entry point for main.js:stories adds this flag as it cannot
      // set decorators but calls configure, and aims not to clear decorators added by other files.
      // HOWEVER: this will still clear global decorators added by addons when reloading preview.js
      //   which is a bug!
      // @ts-ignore

      if (!module._StorybookPreserveDecorators) {
        module.hot.dispose(function () {
          return _this._storyStore.clearGlobalDecorators();
        });
      }
    }
  };

  this._storyStore = storyStore;
};

exports["default"] = ConfigApi;