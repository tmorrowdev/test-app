"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.define-properties");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.entries");

require("core-js/modules/es.object.freeze");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.object.values");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.replace");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.url");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = exports.defaultStoryMapper = exports.getSourceType = void 0;

require("regenerator-runtime/runtime");

var _global = require("global");

var _tsDedent = _interopRequireDefault(require("ts-dedent"));

var _stories = require("../lib/stories");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n            Error: Loading of ref failed\n              at fetch (lib/api/src/modules/refs.ts)\n            \n            URL: ", "\n            \n            We weren't able to load the above URL,\n            it's possible a CORS error happened.\n            \n            Please check your dev-tools network tab.\n          "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// eslint-disable-next-line no-useless-escape
var findFilename = /(\/((?:[^\/]+?)\.[^\/]+?)|\/)$/;

var allSettled = function allSettled(promises) {
  return Promise.all(promises.map(function (promise, i) {
    return promise.then(function (r) {
      return r.ok ? r : false;
    }, function () {
      return false;
    });
  }));
};

var getSourceType = function getSourceType(source) {
  var localOrigin = _global.location.origin,
      localPathname = _global.location.pathname;

  var _URL = new URL(source),
      sourceOrigin = _URL.origin,
      sourcePathname = _URL.pathname;

  var localFull = "".concat(localOrigin + localPathname).replace(findFilename, '');
  var sourceFull = "".concat(sourceOrigin + sourcePathname).replace(findFilename, '');

  if (localFull === sourceFull) {
    return ['local', sourceFull];
  }

  if (source) {
    return ['external', sourceFull];
  }

  return [null, null];
};

exports.getSourceType = getSourceType;

var defaultStoryMapper = function defaultStoryMapper(b, a) {
  return Object.assign(Object.assign({}, a), {}, {
    kind: a.kind.replace('|', '/')
  });
};

exports.defaultStoryMapper = defaultStoryMapper;

var addRefIds = function addRefIds(input, ref) {
  return Object.entries(input).reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        id = _ref2[0],
        item = _ref2[1];

    return Object.assign(Object.assign({}, acc), {}, _defineProperty({}, id, Object.assign(Object.assign({}, item), {}, {
      refId: ref.id
    })));
  }, {});
};

var map = function map(input, ref, options) {
  var storyMapper = options.storyMapper;

  if (storyMapper) {
    return Object.entries(input).reduce(function (acc, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          id = _ref4[0],
          item = _ref4[1];

      return Object.assign(Object.assign({}, acc), {}, _defineProperty({}, id, storyMapper(ref, item)));
    }, {});
  }

  return input;
};

var init = function init(_ref5) {
  var store = _ref5.store,
      provider = _ref5.provider,
      fullAPI = _ref5.fullAPI;
  var api = {
    findRef: function findRef(source) {
      var refs = api.getRefs();
      return Object.values(refs).find(function (_ref6) {
        var url = _ref6.url;
        return url.match(source);
      });
    },
    changeRefVersion: function changeRefVersion(id, url) {
      var previous = api.getRefs()[id];
      var ref = Object.assign(Object.assign({}, previous), {}, {
        stories: {},
        url: url
      });
      api.checkRef(ref);
    },
    changeRefState: function changeRefState(id, ready) {
      var refs = api.getRefs();
      store.setState({
        refs: Object.assign(Object.assign({}, refs), {}, _defineProperty({}, id, Object.assign(Object.assign({}, refs[id]), {}, {
          ready: ready
        })))
      });
    },
    checkRef: function () {
      var _checkRef = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(ref) {
        var id, url, loadedData, _yield$allSettled, _yield$allSettled2, included, omitted, iframe, handle, credentials, _yield$Promise$all, _yield$Promise$all2, stories, metadata;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                id = ref.id, url = ref.url;
                loadedData = {};
                _context2.next = 4;
                return allSettled([(0, _global.fetch)("".concat(url, "/stories.json"), {
                  headers: {
                    Accept: 'application/json'
                  },
                  redirect: 'manual',
                  credentials: 'include'
                }), (0, _global.fetch)("".concat(url, "/stories.json"), {
                  headers: {
                    Accept: 'application/json'
                  },
                  redirect: 'manual',
                  credentials: 'omit'
                }), (0, _global.fetch)("".concat(url, "/iframe.html"), {
                  redirect: 'manual',
                  cors: 'no-cors',
                  credentials: 'omit'
                })]);

              case 4:
                _yield$allSettled = _context2.sent;
                _yield$allSettled2 = _slicedToArray(_yield$allSettled, 3);
                included = _yield$allSettled2[0];
                omitted = _yield$allSettled2[1];
                iframe = _yield$allSettled2[2];

                handle = /*#__PURE__*/function () {
                  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!request) {
                              _context.next = 2;
                              break;
                            }

                            return _context.abrupt("return", Promise.resolve(request).then(function (response) {
                              return response.ok ? response.json() : {};
                            })["catch"](function (error) {
                              return {
                                error: error
                              };
                            }));

                          case 2:
                            return _context.abrupt("return", {});

                          case 3:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function handle(_x2) {
                    return _ref7.apply(this, arguments);
                  };
                }();

                if (!(!included && !omitted && !iframe)) {
                  _context2.next = 14;
                  break;
                }

                loadedData.error = {
                  message: (0, _tsDedent["default"])(_templateObject(), url)
                };
                _context2.next = 23;
                break;

              case 14:
                if (!(omitted || included)) {
                  _context2.next = 23;
                  break;
                }

                credentials = !omitted ? 'include' : 'omit';
                _context2.next = 18;
                return Promise.all([handle(omitted || included), handle((0, _global.fetch)("".concat(url, "/metadata.json"), {
                  headers: {
                    Accept: 'application/json'
                  },
                  redirect: 'manual',
                  credentials: credentials,
                  cache: 'no-cache'
                }))]);

              case 18:
                _yield$Promise$all = _context2.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
                stories = _yield$Promise$all2[0];
                metadata = _yield$Promise$all2[1];
                Object.assign(loadedData, Object.assign(Object.assign({}, stories), metadata));

              case 23:
                api.setRef(id, Object.assign(Object.assign({
                  id: id,
                  url: url
                }, loadedData), {}, {
                  type: !loadedData.stories ? 'auto-inject' : 'lazy'
                }));

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function checkRef(_x) {
        return _checkRef.apply(this, arguments);
      }

      return checkRef;
    }(),
    getRefs: function getRefs() {
      var _store$getState = store.getState(),
          _store$getState$refs = _store$getState.refs,
          refs = _store$getState$refs === void 0 ? {} : _store$getState$refs;

      return refs;
    },
    setRef: function setRef(id, _ref8) {
      var ready = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var stories = _ref8.stories,
          rest = _objectWithoutProperties(_ref8, ["stories"]);

      var _provider$getConfig = provider.getConfig(),
          _provider$getConfig$s = _provider$getConfig.storyMapper,
          storyMapper = _provider$getConfig$s === void 0 ? defaultStoryMapper : _provider$getConfig$s;

      var ref = api.getRefs()[id];
      var after = stories ? addRefIds((0, _stories.transformStoriesRawToStoriesHash)(map(stories, ref, {
        storyMapper: storyMapper
      }), {}, {
        provider: provider
      }), ref) : undefined;
      var result = Object.assign(Object.assign(Object.assign({}, ref), {}, {
        stories: after
      }, rest), {}, {
        ready: ready
      });
      store.setState({
        refs: Object.assign(Object.assign({}, api.getRefs()), {}, _defineProperty({}, id, result))
      });
    }
  };
  var refs = provider.getConfig().refs || {};
  var initialState = refs;
  Object.values(refs).forEach(function (r) {
    // eslint-disable-next-line no-param-reassign
    r.type = 'unknown';
  });
  Object.entries(refs).forEach(function (_ref9) {
    var _ref10 = _slicedToArray(_ref9, 2),
        k = _ref10[0],
        v = _ref10[1];

    api.checkRef(v);
  });
  return {
    api: api,
    state: {
      refs: initialState
    }
  };
};

exports.init = init;