"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.find-index");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.entries");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.object.values");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = void 0;

require("regenerator-runtime/runtime");

var _global = require("global");

var _csf = require("@storybook/csf");

var _coreEvents = require("@storybook/core-events");

var _clientLogger = require("@storybook/client-logger");

var _stories = require("../lib/stories");

var _refs = require("./refs");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var init = function init(_ref) {
  var fullAPI = _ref.fullAPI,
      store = _ref.store,
      navigate = _ref.navigate,
      provider = _ref.provider,
      initialStoryId = _ref.storyId,
      initialViewMode = _ref.viewMode;

  var setInitialStory = function setInitialStory() {
    var _store$getState = store.getState(),
        storyId = _store$getState.storyId,
        viewMode = _store$getState.viewMode,
        storiesHash = _store$getState.storiesHash;

    var story = api.getData(storyId);

    if (viewMode === 'settings' || viewMode === 'page') {
      return;
    }

    if (storyId && storyId.match(/--\*$/)) {
      var idStart = storyId.slice(0, -1); // drop the * at the end

      var firstKindLeaf = Object.values(storiesHash).find(function (s) {
        return !s.children && s.id.substring(0, idStart.length) === idStart;
      });

      if (viewMode && firstKindLeaf) {
        api.selectStory(firstKindLeaf.id, undefined, {});
      }
    } else if (!storyId || storyId === '*' || !story) {
      // when there's no storyId or the storyId item doesn't exist
      // we pick the first leaf and navigate
      var firstLeaf = Object.values(storiesHash).find(function (s) {
        return !s.children;
      });

      if (viewMode && firstLeaf) {
        api.selectStory(firstLeaf.id, undefined, {});
      }
    } else if (story && !story.isLeaf) {
      // When story exists but if it is not the leaf story, it finds the proper
      // leaf story from any depth.
      var firstLeafStoryId = api.findLeafStoryId(storiesHash, storyId);
      api.selectStory(firstLeafStoryId, undefined, {});
    }
  };

  var api = {
    storyId: _csf.toId,
    getData: function getData(storyId, refId) {
      var result = api.resolveStory(storyId, refId);
      return (0, _stories.isRoot)(result) ? undefined : result;
    },
    resolveStory: function resolveStory(storyId, refId) {
      var _store$getState2 = store.getState(),
          refs = _store$getState2.refs,
          storiesHash = _store$getState2.storiesHash;

      if (refId) {
        return refs[refId].stories ? refs[refId].stories[storyId] : undefined;
      }

      return storiesHash ? storiesHash[storyId] : undefined;
    },
    getCurrentStoryData: function getCurrentStoryData() {
      var _store$getState3 = store.getState(),
          storyId = _store$getState3.storyId,
          refId = _store$getState3.refId;

      return api.getData(storyId, refId);
    },
    getParameters: function getParameters(storyIdOrCombo, parameterName) {
      var _ref2 = typeof storyIdOrCombo === 'string' ? {
        storyId: storyIdOrCombo,
        refId: undefined
      } : storyIdOrCombo,
          storyId = _ref2.storyId,
          refId = _ref2.refId;

      var data = api.getData(storyId, refId);

      if ((0, _stories.isStory)(data)) {
        var parameters = data.parameters;
        return parameterName ? parameters[parameterName] : parameters;
      }

      return null;
    },
    getCurrentParameter: function getCurrentParameter(parameterName) {
      var _store$getState4 = store.getState(),
          storyId = _store$getState4.storyId,
          refId = _store$getState4.refId;

      var parameters = api.getParameters({
        storyId: storyId,
        refId: refId
      }, parameterName);

      if (parameters) {
        return parameters;
      }

      return undefined;
    },
    jumpToComponent: function jumpToComponent(direction) {
      var _store$getState5 = store.getState(),
          storiesHash = _store$getState5.storiesHash,
          storyId = _store$getState5.storyId,
          refs = _store$getState5.refs,
          refId = _store$getState5.refId;

      var story = api.getData(storyId, refId); // cannot navigate when there's no current selection

      if (!story) {
        return;
      }

      var hash = refId ? refs[refId].stories || {} : storiesHash;
      var lookupList = Object.entries(hash).reduce(function (acc, i) {
        var value = i[1];

        if (value.isComponent) {
          acc.push(_toConsumableArray(i[1].children));
        }

        return acc;
      }, []);
      var index = lookupList.findIndex(function (i) {
        return i.includes(storyId);
      }); // cannot navigate beyond fist or last

      if (index === lookupList.length - 1 && direction > 0) {
        return;
      }

      if (index === 0 && direction < 0) {
        return;
      }

      var result = lookupList[index + direction][0];

      if (result) {
        api.selectStory(result, undefined, {
          ref: refId
        });
      }
    },
    jumpToStory: function jumpToStory(direction) {
      var _store$getState6 = store.getState(),
          storiesHash = _store$getState6.storiesHash,
          storyId = _store$getState6.storyId,
          refs = _store$getState6.refs,
          refId = _store$getState6.refId;

      var story = api.getData(storyId, refId);

      if (_global.DOCS_MODE) {
        api.jumpToComponent(direction);
        return;
      } // cannot navigate when there's no current selection


      if (!story) {
        return;
      }

      var hash = story.refId ? refs[story.refId].stories : storiesHash;
      var lookupList = Object.keys(hash).filter(function (k) {
        return !(hash[k].children || Array.isArray(hash[k]));
      });
      var index = lookupList.indexOf(storyId); // cannot navigate beyond fist or last

      if (index === lookupList.length - 1 && direction > 0) {
        return;
      }

      if (index === 0 && direction < 0) {
        return;
      }

      var result = lookupList[index + direction];

      if (result) {
        api.selectStory(result, undefined, {
          ref: refId
        });
      }
    },
    setStories: function () {
      var _setStories = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(input, error) {
        var existing, hash, _store$getState7, refId;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Now create storiesHash by reordering the above by group
                existing = store.getState().storiesHash;
                hash = (0, _stories.transformStoriesRawToStoriesHash)(input, existing, {
                  provider: provider
                });
                _context.next = 4;
                return store.setState({
                  storiesHash: hash,
                  storiesConfigured: true,
                  storiesFailed: error
                });

              case 4:
                _store$getState7 = store.getState(), refId = _store$getState7.refId;

                if (!refId) {
                  setInitialStory();
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function setStories(_x, _x2) {
        return _setStories.apply(this, arguments);
      }

      return setStories;
    }(),
    selectStory: function selectStory(kindOrId) {
      var story = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var ref = options.ref,
          viewModeFromArgs = options.viewMode;

      var _store$getState8 = store.getState(),
          _store$getState8$view = _store$getState8.viewMode,
          viewModeFromState = _store$getState8$view === void 0 ? 'story' : _store$getState8$view,
          storyId = _store$getState8.storyId,
          storiesHash = _store$getState8.storiesHash,
          refs = _store$getState8.refs;

      var hash = ref ? refs[ref].stories : storiesHash;

      if (!story) {
        var s = hash[kindOrId] || hash[(0, _csf.sanitize)(kindOrId)]; // eslint-disable-next-line no-nested-ternary

        var _id = s ? s.children ? s.children[0] : s.id : kindOrId;

        var viewMode = viewModeFromArgs || s && s.parameters.viewMode ? s.parameters.viewMode : viewModeFromState;
        var p = s && s.refId ? "/".concat(viewMode, "/").concat(s.refId, "_").concat(_id) : "/".concat(viewMode, "/").concat(_id);
        navigate(p);
      } else if (!kindOrId) {
        // This is a slugified version of the kind, but that's OK, our toId function is idempotent
        var kind = storyId.split('--', 2)[0];

        var _id2 = (0, _csf.toId)(kind, story);

        api.selectStory(_id2, undefined, options);
      } else {
        var _id3 = ref ? "".concat(ref, "_").concat((0, _csf.toId)(kindOrId, story)) : (0, _csf.toId)(kindOrId, story);

        if (hash[_id3]) {
          api.selectStory(_id3, undefined, options);
        } else {
          // Support legacy API with component permalinks, where kind is `x/y` but permalink is 'z'
          var _k = hash[(0, _csf.sanitize)(kindOrId)];

          if (_k && _k.children) {
            var foundId = _k.children.find(function (childId) {
              return hash[childId].name === story;
            });

            if (foundId) {
              api.selectStory(foundId, undefined, options);
            }
          }
        }
      }
    },
    findLeafStoryId: function findLeafStoryId(storiesHash, storyId) {
      if (storiesHash[storyId].isLeaf) {
        return storyId;
      }

      var childStoryId = storiesHash[storyId].children[0];
      return api.findLeafStoryId(storiesHash, childStoryId);
    },
    updateStoryArgs: function updateStoryArgs(id, newArgs) {
      fullAPI.emit(_coreEvents.UPDATE_STORY_ARGS, id, newArgs);
    }
  };

  var initModule = function initModule() {
    fullAPI.on(_coreEvents.STORY_CHANGED, function handleStoryChange(storyId) {
      var source = this.source;

      var _getSourceType = (0, _refs.getSourceType)(source),
          _getSourceType2 = _slicedToArray(_getSourceType, 1),
          sourceType = _getSourceType2[0];

      if (sourceType === 'local') {
        var options = fullAPI.getCurrentParameter('options');

        if (options) {
          fullAPI.setOptions(options);
        }
      }
    });
    fullAPI.on(_coreEvents.SET_STORIES, function handleSetStories(data) {
      // the event originates from an iframe, event.source is the iframe's location origin + pathname
      var source = this.source;

      var _getSourceType3 = (0, _refs.getSourceType)(source),
          _getSourceType4 = _slicedToArray(_getSourceType3, 2),
          sourceType = _getSourceType4[0],
          sourceLocation = _getSourceType4[1]; // TODO: what is the mechanism where we warn here?


      if (data.v && data.v > 2) {
        // eslint-disable-next-line no-console
        console.warn("Received SET_STORIES event with version ".concat(data.v, ", we'll try and handle it"));
      }

      var stories = data.v ? (0, _stories.denormalizeStoryParameters)(data) : data.stories; // @ts-ignore

      var error = data.error || undefined;

      switch (sourceType) {
        // if it's a local source, we do nothing special
        case 'local':
          {
            if (!data.v) {
              throw new Error('Unexpected legacy SET_STORIES event from local source');
            }

            fullAPI.setStories(stories, error);
            fullAPI.setOptions(data.globalParameters.options);
            break;
          }
        // if it's a ref, we need to map the incoming stories to a prefixed version, so it cannot conflict with others

        case 'external':
          {
            var ref = fullAPI.findRef(sourceLocation);

            if (ref) {
              fullAPI.setRef(ref.id, Object.assign(Object.assign(Object.assign({}, ref), data), {}, {
                stories: stories
              }), true);
              break;
            }
          }
        // if we couldn't find the source, something risky happened, we ignore the input, and log a warning

        default:
          {
            _clientLogger.logger.warn('received a SET_STORIES frame that was not configured as a ref');

            break;
          }
      }
    });
    fullAPI.on(_coreEvents.SELECT_STORY, function selectStoryHandler(_ref3) {
      var kind = _ref3.kind,
          story = _ref3.story,
          rest = _objectWithoutProperties(_ref3, ["kind", "story"]);

      var source = this.source;

      var _getSourceType5 = (0, _refs.getSourceType)(source),
          _getSourceType6 = _slicedToArray(_getSourceType5, 2),
          sourceType = _getSourceType6[0],
          sourceLocation = _getSourceType6[1];

      switch (sourceType) {
        case 'local':
          {
            fullAPI.selectStory(kind, story, rest);
            break;
          }

        case 'external':
          {
            var ref = fullAPI.findRef(sourceLocation);
            fullAPI.selectStory(kind, story, Object.assign(Object.assign({}, rest), {}, {
              ref: ref.id
            }));
            break;
          }

        default:
          {
            _clientLogger.logger.warn('received a SET_STORIES frame that was not configured as a ref');

            break;
          }
      }
    });
    fullAPI.on(_coreEvents.STORY_ARGS_UPDATED, function (id, args) {
      var _store$getState9 = store.getState(),
          storiesHash = _store$getState9.storiesHash;

      storiesHash[id].args = args;
      store.setState({
        storiesHash: storiesHash
      });
    });
  };

  return {
    api: api,
    state: {
      storiesHash: {},
      storyId: initialStoryId,
      viewMode: initialViewMode,
      storiesConfigured: false
    },
    init: initModule
  };
};

exports.init = init;