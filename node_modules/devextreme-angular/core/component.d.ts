/*!
 * devextreme-angular
 * Version: 20.1.4
 * Build date: Tue Jun 02 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, NgZone, QueryList, SimpleChanges, EventEmitter, OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { DxTemplateDirective } from './template';
import { IDxTemplateHost, DxTemplateHost } from './template-host';
import { EmitterHelper } from './events-strategy';
import { WatcherHelper } from './watcher-helper';
import { INestedOptionContainer, ICollectionNestedOption, ICollectionNestedOptionContainer } from './nested-option';
import * as ɵngcc0 from '@angular/core';
export declare const getServerStateKey: () => any;
export declare abstract class DxComponent implements OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit, INestedOptionContainer, ICollectionNestedOptionContainer, IDxTemplateHost {
    protected element: ElementRef;
    private watcherHelper;
    private transferState;
    private platformId;
    private _initialOptions;
    protected _optionsToUpdate: any;
    private _collectionContainerImpl;
    eventHelper: EmitterHelper;
    optionChangedHandlers: EventEmitter<any>;
    templates: DxTemplateDirective[];
    instance: any;
    isLinked: boolean;
    changedOptions: {};
    removedNestedComponents: any[];
    recreatedNestedComponents: any[];
    widgetUpdateLocked: boolean;
    private _initTemplates;
    private _initEvents;
    private _initOptions;
    private _initPlatform;
    protected _createEventEmitters(events: any): void;
    _shouldOptionChange(name: string, value: any): boolean;
    clearChangedOptions(): void;
    protected _getOption(name: string): any;
    lockWidgetUpdate(): void;
    unlockWidgetUpdate(): void;
    protected _setOption(name: string, value: any): void;
    protected abstract _createInstance(element: any, options: any): any;
    protected _createWidget(element: any): void;
    protected _destroyWidget(): void;
    constructor(element: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, watcherHelper: WatcherHelper, transferState: TransferState, platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    applyOptions(): void;
    resetOptions(): void;
    isRecreated(name: string): boolean;
    setTemplate(template: DxTemplateDirective): void;
    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponent, never, never, {}, {}, never>;
}
export declare abstract class DxComponentExtension extends DxComponent implements OnInit, AfterViewInit {
    createInstance(element: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponentExtension, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponentExtension, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcclxuICogVmVyc2lvbjogMjAuMS40XHJcbiAqIEJ1aWxkIGRhdGU6IFR1ZSBKdW4gMDIgMjAyMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXHJcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxyXG4gKi9cclxuaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBRdWVyeUxpc3QsIFNpbXBsZUNoYW5nZXMsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIERvQ2hlY2ssIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBEeFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XHJcbmltcG9ydCB7IElEeFRlbXBsYXRlSG9zdCwgRHhUZW1wbGF0ZUhvc3QgfSBmcm9tICcuL3RlbXBsYXRlLWhvc3QnO1xyXG5pbXBvcnQgeyBFbWl0dGVySGVscGVyIH0gZnJvbSAnLi9ldmVudHMtc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBXYXRjaGVySGVscGVyIH0gZnJvbSAnLi93YXRjaGVyLWhlbHBlcic7XHJcbmltcG9ydCB7IElOZXN0ZWRPcHRpb25Db250YWluZXIsIElDb2xsZWN0aW9uTmVzdGVkT3B0aW9uLCBJQ29sbGVjdGlvbk5lc3RlZE9wdGlvbkNvbnRhaW5lciB9IGZyb20gJy4vbmVzdGVkLW9wdGlvbic7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGdldFNlcnZlclN0YXRlS2V5OiAoKSA9PiBhbnk7XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIER4Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIERvQ2hlY2ssIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0luaXQsIElOZXN0ZWRPcHRpb25Db250YWluZXIsIElDb2xsZWN0aW9uTmVzdGVkT3B0aW9uQ29udGFpbmVyLCBJRHhUZW1wbGF0ZUhvc3Qge1xyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgICBwcml2YXRlIHdhdGNoZXJIZWxwZXI7XHJcbiAgICBwcml2YXRlIHRyYW5zZmVyU3RhdGU7XHJcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XHJcbiAgICBwcml2YXRlIF9pbml0aWFsT3B0aW9ucztcclxuICAgIHByb3RlY3RlZCBfb3B0aW9uc1RvVXBkYXRlOiBhbnk7XHJcbiAgICBwcml2YXRlIF9jb2xsZWN0aW9uQ29udGFpbmVySW1wbDtcclxuICAgIGV2ZW50SGVscGVyOiBFbWl0dGVySGVscGVyO1xyXG4gICAgb3B0aW9uQ2hhbmdlZEhhbmRsZXJzOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHRlbXBsYXRlczogRHhUZW1wbGF0ZURpcmVjdGl2ZVtdO1xyXG4gICAgaW5zdGFuY2U6IGFueTtcclxuICAgIGlzTGlua2VkOiBib29sZWFuO1xyXG4gICAgY2hhbmdlZE9wdGlvbnM6IHt9O1xyXG4gICAgcmVtb3ZlZE5lc3RlZENvbXBvbmVudHM6IGFueVtdO1xyXG4gICAgcmVjcmVhdGVkTmVzdGVkQ29tcG9uZW50czogYW55W107XHJcbiAgICB3aWRnZXRVcGRhdGVMb2NrZWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9pbml0VGVtcGxhdGVzO1xyXG4gICAgcHJpdmF0ZSBfaW5pdEV2ZW50cztcclxuICAgIHByaXZhdGUgX2luaXRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfaW5pdFBsYXRmb3JtO1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVFdmVudEVtaXR0ZXJzKGV2ZW50czogYW55KTogdm9pZDtcclxuICAgIF9zaG91bGRPcHRpb25DaGFuZ2UobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogYm9vbGVhbjtcclxuICAgIGNsZWFyQ2hhbmdlZE9wdGlvbnMoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBfZ2V0T3B0aW9uKG5hbWU6IHN0cmluZyk6IGFueTtcclxuICAgIGxvY2tXaWRnZXRVcGRhdGUoKTogdm9pZDtcclxuICAgIHVubG9ja1dpZGdldFVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIF9zZXRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfY3JlYXRlSW5zdGFuY2UoZWxlbWVudDogYW55LCBvcHRpb25zOiBhbnkpOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgX2NyZWF0ZVdpZGdldChlbGVtZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIF9kZXN0cm95V2lkZ2V0KCk6IHZvaWQ7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSwgdGVtcGxhdGVIb3N0OiBEeFRlbXBsYXRlSG9zdCwgd2F0Y2hlckhlbHBlcjogV2F0Y2hlckhlbHBlciwgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSwgcGxhdGZvcm1JZDogYW55KTtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xyXG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIGFwcGx5T3B0aW9ucygpOiB2b2lkO1xyXG4gICAgcmVzZXRPcHRpb25zKCk6IHZvaWQ7XHJcbiAgICBpc1JlY3JlYXRlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuO1xyXG4gICAgc2V0VGVtcGxhdGUodGVtcGxhdGU6IER4VGVtcGxhdGVEaXJlY3RpdmUpOiB2b2lkO1xyXG4gICAgc2V0Q2hpbGRyZW48VCBleHRlbmRzIElDb2xsZWN0aW9uTmVzdGVkT3B0aW9uPihwcm9wZXJ0eU5hbWU6IHN0cmluZywgaXRlbXM6IFF1ZXJ5TGlzdDxUPik6IGFueTtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBEeENvbXBvbmVudEV4dGVuc2lvbiBleHRlbmRzIER4Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIGNyZWF0ZUluc3RhbmNlKGVsZW1lbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbn1cclxuIl19