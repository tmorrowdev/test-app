import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, SkipSelf, Optional, Host, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import DxValidator from 'devextreme/ui/validator';
import { DxComponentExtension, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiValidationRuleComponent, DxoAdapterModule, DxiValidationRuleModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.1.4
 * Build date: Tue Jun 02 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * A widget that is used to validate the associated DevExtreme editors against the defined validation rules.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
let DxValidatorComponent = class DxValidatorComponent extends DxComponentExtension {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, parentOptionHost, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this._createEventEmitters([
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'validated', emit: 'onValidated' },
            { emit: 'adapterChange' },
            { emit: 'elementAttrChange' },
            { emit: 'heightChange' },
            { emit: 'nameChange' },
            { emit: 'validationGroupChange' },
            { emit: 'validationRulesChange' },
            { emit: 'widthChange' }
        ]);
        this.parentElement = this.getParentElement(parentOptionHost);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * An object that specifies what and when to validate, and how to apply the validation result.
     */
    get adapter() {
        return this._getOption('adapter');
    }
    set adapter(value) {
        this._setOption('adapter', value);
    }
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * Specifies the widget's height.
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * Specifies the editor name to be used in the validation default messages.
     */
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    /**
     * Specifies the validation group the editor will be related to.
     */
    get validationGroup() {
        return this._getOption('validationGroup');
    }
    set validationGroup(value) {
        this._setOption('validationGroup', value);
    }
    /**
     * An array of validation rules to be checked for the editor with which the dxValidator object is associated.
     */
    get validationRules() {
        return this._getOption('validationRules');
    }
    set validationRules(value) {
        this._setOption('validationRules', value);
    }
    /**
     * Specifies the widget's width.
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    get validationRulesChildren() {
        return this._getOption('validationRules');
    }
    set validationRulesChildren(value) {
        this.setChildren('validationRules', value);
    }
    _createInstance(element, options) {
        if (this.parentElement) {
            return new DxValidator(this.parentElement, options);
        }
        return new DxValidator(element, options);
    }
    getParentElement(host) {
        if (host) {
            const parentHost = host.getHost();
            return parentHost.element.nativeElement;
        }
        return;
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('validationRules', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('validationRules');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxValidatorComponent.ɵfac = function DxValidatorComponent_Factory(t) { return new (t || DxValidatorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxValidatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxValidatorComponent, selectors: [["dx-validator"]], contentQueries: function DxValidatorComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
    } }, inputs: { adapter: "adapter", elementAttr: "elementAttr", height: "height", name: "name", validationGroup: "validationGroup", validationRules: "validationRules", width: "width" }, outputs: { onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValidated: "onValidated", adapterChange: "adapterChange", elementAttrChange: "elementAttrChange", heightChange: "heightChange", nameChange: "nameChange", validationGroupChange: "validationGroupChange", validationRulesChange: "validationRulesChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxValidatorComponent_Template(rf, ctx) { }, encapsulation: 2 });
DxValidatorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Optional }, { type: Host }] },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxValidatorComponent.prototype, "adapter", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxValidatorComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxValidatorComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxValidatorComponent.prototype, "name", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxValidatorComponent.prototype, "validationGroup", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxValidatorComponent.prototype, "validationRules", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxValidatorComponent.prototype, "width", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "onValidated", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "adapterChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "nameChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "validationGroupChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "validationRulesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxValidatorComponent.prototype, "widthChange", void 0);
__decorate([
    ContentChildren(DxiValidationRuleComponent),
    __metadata("design:type", QueryList),
    __metadata("design:paramtypes", [Object])
], DxValidatorComponent.prototype, "validationRulesChildren", null);
DxValidatorComponent = __decorate([ __param(5, SkipSelf()), __param(5, Optional()), __param(5, Host()),
    __param(8, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        NestedOptionHost,
        TransferState, Object])
], DxValidatorComponent);
let DxValidatorModule = class DxValidatorModule {
};
DxValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxValidatorModule });
DxValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxValidatorModule_Factory(t) { return new (t || DxValidatorModule)(); }, imports: [[
            DxoAdapterModule,
            DxiValidationRuleModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoAdapterModule,
        DxiValidationRuleModule,
        DxTemplateModule] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxValidatorComponent, [{
        type: Component,
        args: [{
                selector: 'dx-validator',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { adapter: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], height: [{
            type: Input
        }], name: [{
            type: Input
        }], validationGroup: [{
            type: Input
        }], validationRules: [{
            type: Input
        }], width: [{
            type: Input
        }], validationRulesChildren: [{
            type: ContentChildren,
            args: [DxiValidationRuleComponent]
        }], onDisposing: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onValidated: [{
            type: Output
        }], adapterChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], nameChange: [{
            type: Output
        }], validationGroupChange: [{
            type: Output
        }], validationRulesChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxValidatorModule, { declarations: function () { return [DxValidatorComponent]; }, imports: function () { return [DxoAdapterModule,
        DxiValidationRuleModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxValidatorComponent,
        DxoAdapterModule,
        DxiValidationRuleModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxValidatorModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoAdapterModule,
                    DxiValidationRuleModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxValidatorComponent
                ],
                exports: [
                    DxValidatorComponent,
                    DxoAdapterModule,
                    DxiValidationRuleModule,
                    DxTemplateModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DxValidatorComponent, DxValidatorModule };

//# sourceMappingURL=devextreme-angular-ui-validator.js.map