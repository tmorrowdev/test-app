import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';
import 'devextreme/bundles/dx.all';
import DxFileManager from 'devextreme/ui/file_manager';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.1.4
 * Build date: Tue Jun 02 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The FileManager is a widget that allows users to upload, select, and manage files and directories in different file storages.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
let DxFileManagerComponent = class DxFileManagerComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'contextMenuItemClick', emit: 'onContextMenuItemClick' },
            { subscribe: 'currentDirectoryChanged', emit: 'onCurrentDirectoryChanged' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'errorOccurred', emit: 'onErrorOccurred' },
            { subscribe: 'focusedItemChanged', emit: 'onFocusedItemChanged' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectedFileOpened', emit: 'onSelectedFileOpened' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { subscribe: 'toolbarItemClick', emit: 'onToolbarItemClick' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'allowedFileExtensionsChange' },
            { emit: 'contextMenuChange' },
            { emit: 'currentPathChange' },
            { emit: 'currentPathKeysChange' },
            { emit: 'customizeDetailColumnsChange' },
            { emit: 'customizeThumbnailChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'fileSystemProviderChange' },
            { emit: 'focusedItemKeyChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'itemViewChange' },
            { emit: 'permissionsChange' },
            { emit: 'rootFolderNameChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'selectedItemKeysChange' },
            { emit: 'selectionModeChange' },
            { emit: 'tabIndexChange' },
            { emit: 'toolbarChange' },
            { emit: 'uploadChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * Specifies the shortcut key that sets focus on the widget.
     */
    get accessKey() {
        return this._getOption('accessKey');
    }
    set accessKey(value) {
        this._setOption('accessKey', value);
    }
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
     */
    get activeStateEnabled() {
        return this._getOption('activeStateEnabled');
    }
    set activeStateEnabled(value) {
        this._setOption('activeStateEnabled', value);
    }
    /**
     * Specifies the allowed upload file extensions.
     */
    get allowedFileExtensions() {
        return this._getOption('allowedFileExtensions');
    }
    set allowedFileExtensions(value) {
        this._setOption('allowedFileExtensions', value);
    }
    /**
     * Configures the context menu settings.
     */
    get contextMenu() {
        return this._getOption('contextMenu');
    }
    set contextMenu(value) {
        this._setOption('contextMenu', value);
    }
    /**
     * Specifies the path that is used when the FileManager is initialized.
     */
    get currentPath() {
        return this._getOption('currentPath');
    }
    set currentPath(value) {
        this._setOption('currentPath', value);
    }
    /**
     * Specifies an array of path keys to the current location.
     */
    get currentPathKeys() {
        return this._getOption('currentPathKeys');
    }
    set currentPathKeys(value) {
        this._setOption('currentPathKeys', value);
    }
    /**
     * Customizes columns in details view. Applies only if itemView.mode is "details".
     */
    get customizeDetailColumns() {
        return this._getOption('customizeDetailColumns');
    }
    set customizeDetailColumns(value) {
        this._setOption('customizeDetailColumns', value);
    }
    /**
     * Allows you to provide custom icons to be used as thumbnails.
     */
    get customizeThumbnail() {
        return this._getOption('customizeThumbnail');
    }
    set customizeThumbnail(value) {
        this._setOption('customizeThumbnail', value);
    }
    /**
     * Specifies whether the widget responds to user interaction.
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * Specifies the file system provider.
     */
    get fileSystemProvider() {
        return this._getOption('fileSystemProvider');
    }
    set fileSystemProvider(value) {
        this._setOption('fileSystemProvider', value);
    }
    /**
     * Specifies a key of the initially or currently focused item.
     */
    get focusedItemKey() {
        return this._getOption('focusedItemKey');
    }
    set focusedItemKey(value) {
        this._setOption('focusedItemKey', value);
    }
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
     */
    get focusStateEnabled() {
        return this._getOption('focusStateEnabled');
    }
    set focusStateEnabled(value) {
        this._setOption('focusStateEnabled', value);
    }
    /**
     * Specifies the widget's height.
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
     */
    get hint() {
        return this._getOption('hint');
    }
    set hint(value) {
        this._setOption('hint', value);
    }
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
     */
    get hoverStateEnabled() {
        return this._getOption('hoverStateEnabled');
    }
    set hoverStateEnabled(value) {
        this._setOption('hoverStateEnabled', value);
    }
    /**
     * Configures the file and folder view.
     */
    get itemView() {
        return this._getOption('itemView');
    }
    set itemView(value) {
        this._setOption('itemView', value);
    }
    /**
     * Specifies actions that a user is allowed to perform on files and folders.
     */
    get permissions() {
        return this._getOption('permissions');
    }
    set permissions(value) {
        this._setOption('permissions', value);
    }
    /**
     * Specifies the root folder name.
     */
    get rootFolderName() {
        return this._getOption('rootFolderName');
    }
    set rootFolderName(value) {
        this._setOption('rootFolderName', value);
    }
    /**
     * Switches the widget to a right-to-left representation.
     */
    get rtlEnabled() {
        return this._getOption('rtlEnabled');
    }
    set rtlEnabled(value) {
        this._setOption('rtlEnabled', value);
    }
    /**
     * Contains an array of initially or currently selected files and directories' keys.
     */
    get selectedItemKeys() {
        return this._getOption('selectedItemKeys');
    }
    set selectedItemKeys(value) {
        this._setOption('selectedItemKeys', value);
    }
    /**
     * Specifies whether a user can select a single or multiple files and folders in the item view simultaneously.
     */
    get selectionMode() {
        return this._getOption('selectionMode');
    }
    set selectionMode(value) {
        this._setOption('selectionMode', value);
    }
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
     */
    get tabIndex() {
        return this._getOption('tabIndex');
    }
    set tabIndex(value) {
        this._setOption('tabIndex', value);
    }
    /**
     * Configures toolbar settings.
     */
    get toolbar() {
        return this._getOption('toolbar');
    }
    set toolbar(value) {
        this._setOption('toolbar', value);
    }
    /**
     * Configures upload settings.
     */
    get upload() {
        return this._getOption('upload');
    }
    set upload(value) {
        this._setOption('upload', value);
    }
    /**
     * Specifies whether the widget is visible.
     */
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    /**
     * Specifies the widget's width.
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    _createInstance(element, options) {
        return new DxFileManager(element, options);
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('allowedFileExtensions', changes);
        this.setupChanges('currentPathKeys', changes);
        this.setupChanges('selectedItemKeys', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('allowedFileExtensions');
        this._idh.doCheck('currentPathKeys');
        this._idh.doCheck('selectedItemKeys');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxFileManagerComponent.ɵfac = function DxFileManagerComponent_Factory(t) { return new (t || DxFileManagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxFileManagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxFileManagerComponent, selectors: [["dx-file-manager"]], inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowedFileExtensions: "allowedFileExtensions", contextMenu: "contextMenu", currentPath: "currentPath", currentPathKeys: "currentPathKeys", customizeDetailColumns: "customizeDetailColumns", customizeThumbnail: "customizeThumbnail", disabled: "disabled", elementAttr: "elementAttr", fileSystemProvider: "fileSystemProvider", focusedItemKey: "focusedItemKey", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", itemView: "itemView", permissions: "permissions", rootFolderName: "rootFolderName", rtlEnabled: "rtlEnabled", selectedItemKeys: "selectedItemKeys", selectionMode: "selectionMode", tabIndex: "tabIndex", toolbar: "toolbar", upload: "upload", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onContextMenuItemClick: "onContextMenuItemClick", onCurrentDirectoryChanged: "onCurrentDirectoryChanged", onDisposing: "onDisposing", onErrorOccurred: "onErrorOccurred", onFocusedItemChanged: "onFocusedItemChanged", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onSelectedFileOpened: "onSelectedFileOpened", onSelectionChanged: "onSelectionChanged", onToolbarItemClick: "onToolbarItemClick", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowedFileExtensionsChange: "allowedFileExtensionsChange", contextMenuChange: "contextMenuChange", currentPathChange: "currentPathChange", currentPathKeysChange: "currentPathKeysChange", customizeDetailColumnsChange: "customizeDetailColumnsChange", customizeThumbnailChange: "customizeThumbnailChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", fileSystemProviderChange: "fileSystemProviderChange", focusedItemKeyChange: "focusedItemKeyChange", focusStateEnabledChange: "focusStateEnabledChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", itemViewChange: "itemViewChange", permissionsChange: "permissionsChange", rootFolderNameChange: "rootFolderNameChange", rtlEnabledChange: "rtlEnabledChange", selectedItemKeysChange: "selectedItemKeysChange", selectionModeChange: "selectionModeChange", tabIndexChange: "tabIndexChange", toolbarChange: "toolbarChange", uploadChange: "uploadChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxFileManagerComponent_Template(rf, ctx) { }, encapsulation: 2 });
DxFileManagerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "accessKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "activeStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileManagerComponent.prototype, "allowedFileExtensions", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "contextMenu", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "currentPath", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileManagerComponent.prototype, "currentPathKeys", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileManagerComponent.prototype, "customizeDetailColumns", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileManagerComponent.prototype, "customizeThumbnail", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "fileSystemProvider", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "focusedItemKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "focusStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "hint", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "hoverStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "itemView", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "permissions", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "rootFolderName", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "rtlEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileManagerComponent.prototype, "selectedItemKeys", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "selectionMode", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileManagerComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "toolbar", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "upload", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "width", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onContentReady", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onContextMenuItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onCurrentDirectoryChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onErrorOccurred", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onFocusedItemChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onSelectedFileOpened", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onSelectionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onToolbarItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "accessKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "activeStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "allowedFileExtensionsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "contextMenuChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "currentPathChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "currentPathKeysChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "customizeDetailColumnsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "customizeThumbnailChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "fileSystemProviderChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "focusedItemKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "focusStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "hintChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "hoverStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "itemViewChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "permissionsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "rootFolderNameChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "rtlEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "selectedItemKeysChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "selectionModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "tabIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "toolbarChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "uploadChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "visibleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "widthChange", void 0);
DxFileManagerComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxFileManagerComponent);
let DxFileManagerModule = class DxFileManagerModule {
};
DxFileManagerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxFileManagerModule });
DxFileManagerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxFileManagerModule_Factory(t) { return new (t || DxFileManagerModule)(); }, imports: [[
            DxoContextMenuModule,
            DxiItemModule,
            DxoItemViewModule,
            DxoDetailsModule,
            DxiColumnModule,
            DxoPermissionsModule,
            DxoToolbarModule,
            DxiFileSelectionItemModule,
            DxoUploadModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoContextMenuModule,
        DxiItemModule,
        DxoItemViewModule,
        DxoDetailsModule,
        DxiColumnModule,
        DxoPermissionsModule,
        DxoToolbarModule,
        DxiFileSelectionItemModule,
        DxoUploadModule,
        DxTemplateModule] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxFileManagerComponent, [{
        type: Component,
        args: [{
                selector: 'dx-file-manager',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { accessKey: [{
            type: Input
        }], activeStateEnabled: [{
            type: Input
        }], allowedFileExtensions: [{
            type: Input
        }], contextMenu: [{
            type: Input
        }], currentPath: [{
            type: Input
        }], currentPathKeys: [{
            type: Input
        }], customizeDetailColumns: [{
            type: Input
        }], customizeThumbnail: [{
            type: Input
        }], disabled: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], fileSystemProvider: [{
            type: Input
        }], focusedItemKey: [{
            type: Input
        }], focusStateEnabled: [{
            type: Input
        }], height: [{
            type: Input
        }], hint: [{
            type: Input
        }], hoverStateEnabled: [{
            type: Input
        }], itemView: [{
            type: Input
        }], permissions: [{
            type: Input
        }], rootFolderName: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], selectedItemKeys: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], toolbar: [{
            type: Input
        }], upload: [{
            type: Input
        }], visible: [{
            type: Input
        }], width: [{
            type: Input
        }], onContentReady: [{
            type: Output
        }], onContextMenuItemClick: [{
            type: Output
        }], onCurrentDirectoryChanged: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onErrorOccurred: [{
            type: Output
        }], onFocusedItemChanged: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onSelectedFileOpened: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], onToolbarItemClick: [{
            type: Output
        }], accessKeyChange: [{
            type: Output
        }], activeStateEnabledChange: [{
            type: Output
        }], allowedFileExtensionsChange: [{
            type: Output
        }], contextMenuChange: [{
            type: Output
        }], currentPathChange: [{
            type: Output
        }], currentPathKeysChange: [{
            type: Output
        }], customizeDetailColumnsChange: [{
            type: Output
        }], customizeThumbnailChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], fileSystemProviderChange: [{
            type: Output
        }], focusedItemKeyChange: [{
            type: Output
        }], focusStateEnabledChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], hintChange: [{
            type: Output
        }], hoverStateEnabledChange: [{
            type: Output
        }], itemViewChange: [{
            type: Output
        }], permissionsChange: [{
            type: Output
        }], rootFolderNameChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], selectedItemKeysChange: [{
            type: Output
        }], selectionModeChange: [{
            type: Output
        }], tabIndexChange: [{
            type: Output
        }], toolbarChange: [{
            type: Output
        }], uploadChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFileManagerModule, { declarations: function () { return [DxFileManagerComponent]; }, imports: function () { return [DxoContextMenuModule,
        DxiItemModule,
        DxoItemViewModule,
        DxoDetailsModule,
        DxiColumnModule,
        DxoPermissionsModule,
        DxoToolbarModule,
        DxiFileSelectionItemModule,
        DxoUploadModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxFileManagerComponent,
        DxoContextMenuModule,
        DxiItemModule,
        DxoItemViewModule,
        DxoDetailsModule,
        DxiColumnModule,
        DxoPermissionsModule,
        DxoToolbarModule,
        DxiFileSelectionItemModule,
        DxoUploadModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxFileManagerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoContextMenuModule,
                    DxiItemModule,
                    DxoItemViewModule,
                    DxoDetailsModule,
                    DxiColumnModule,
                    DxoPermissionsModule,
                    DxoToolbarModule,
                    DxiFileSelectionItemModule,
                    DxoUploadModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxFileManagerComponent
                ],
                exports: [
                    DxFileManagerComponent,
                    DxoContextMenuModule,
                    DxiItemModule,
                    DxoItemViewModule,
                    DxoDetailsModule,
                    DxiColumnModule,
                    DxoPermissionsModule,
                    DxoToolbarModule,
                    DxiFileSelectionItemModule,
                    DxoUploadModule,
                    DxTemplateModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DxFileManagerComponent, DxFileManagerModule };

//# sourceMappingURL=devextreme-angular-ui-file-manager.js.map