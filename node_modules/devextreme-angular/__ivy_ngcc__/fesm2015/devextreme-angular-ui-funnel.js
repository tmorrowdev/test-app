import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';
import DxFunnel from 'devextreme/viz/funnel';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.1.4
 * Build date: Tue Jun 02 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Funnel is a widget that visualizes a value at different stages. It helps assess value changes throughout these stages and identify potential issues. The Funnel widget conveys information using different interactive elements (tooltips, labels, legend) and enables you to create not only a funnel, but also a pyramid chart.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
let DxFunnelComponent = class DxFunnelComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this._createEventEmitters([
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'drawn', emit: 'onDrawn' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'hoverChanged', emit: 'onHoverChanged' },
            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'itemClick', emit: 'onItemClick' },
            { subscribe: 'legendClick', emit: 'onLegendClick' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { emit: 'adaptiveLayoutChange' },
            { emit: 'algorithmChange' },
            { emit: 'argumentFieldChange' },
            { emit: 'colorFieldChange' },
            { emit: 'dataSourceChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'exportChange' },
            { emit: 'hoverEnabledChange' },
            { emit: 'invertedChange' },
            { emit: 'itemChange' },
            { emit: 'labelChange' },
            { emit: 'legendChange' },
            { emit: 'loadingIndicatorChange' },
            { emit: 'marginChange' },
            { emit: 'neckHeightChange' },
            { emit: 'neckWidthChange' },
            { emit: 'paletteChange' },
            { emit: 'paletteExtensionModeChange' },
            { emit: 'pathModifiedChange' },
            { emit: 'redrawOnResizeChange' },
            { emit: 'resolveLabelOverlappingChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'selectionModeChange' },
            { emit: 'sizeChange' },
            { emit: 'sortDataChange' },
            { emit: 'themeChange' },
            { emit: 'titleChange' },
            { emit: 'tooltipChange' },
            { emit: 'valueFieldChange' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * Specifies adaptive layout options.
     */
    get adaptiveLayout() {
        return this._getOption('adaptiveLayout');
    }
    set adaptiveLayout(value) {
        this._setOption('adaptiveLayout', value);
    }
    /**
     * Specifies the algorithm for building the funnel.
     */
    get algorithm() {
        return this._getOption('algorithm');
    }
    set algorithm(value) {
        this._setOption('algorithm', value);
    }
    /**
     * Specifies which data source field provides arguments for funnel items. The argument identifies a funnel item and represents it on the legend.
     */
    get argumentField() {
        return this._getOption('argumentField');
    }
    set argumentField(value) {
        this._setOption('argumentField', value);
    }
    /**
     * Specifies which data source field provides colors for funnel items. If this field is absent, the palette provides the colors.
     */
    get colorField() {
        return this._getOption('colorField');
    }
    set colorField(value) {
        this._setOption('colorField', value);
    }
    /**
     * Binds the widget to data.
     */
    get dataSource() {
        return this._getOption('dataSource');
    }
    set dataSource(value) {
        this._setOption('dataSource', value);
    }
    /**
     * Specifies whether the widget responds to user interaction.
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * Configures the exporting and printing features.
     */
    get export() {
        return this._getOption('export');
    }
    set export(value) {
        this._setOption('export', value);
    }
    /**
     * Specifies whether funnel items change their style when a user pauses on them.
     */
    get hoverEnabled() {
        return this._getOption('hoverEnabled');
    }
    set hoverEnabled(value) {
        this._setOption('hoverEnabled', value);
    }
    /**
     * Turns the funnel upside down.
     */
    get inverted() {
        return this._getOption('inverted');
    }
    set inverted(value) {
        this._setOption('inverted', value);
    }
    /**
     * Configures funnel items' appearance.
     */
    get item() {
        return this._getOption('item');
    }
    set item(value) {
        this._setOption('item', value);
    }
    /**
     * Configures funnel item labels.
     */
    get label() {
        return this._getOption('label');
    }
    set label(value) {
        this._setOption('label', value);
    }
    /**
     * Configures the legend.
     */
    get legend() {
        return this._getOption('legend');
    }
    set legend(value) {
        this._setOption('legend', value);
    }
    /**
     * Configures the loading indicator.
     */
    get loadingIndicator() {
        return this._getOption('loadingIndicator');
    }
    set loadingIndicator(value) {
        this._setOption('loadingIndicator', value);
    }
    /**
     * Generates space around the widget.
     */
    get margin() {
        return this._getOption('margin');
    }
    set margin(value) {
        this._setOption('margin', value);
    }
    /**
     * Specifies the ratio between the height of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is "dynamicHeight".
     */
    get neckHeight() {
        return this._getOption('neckHeight');
    }
    set neckHeight(value) {
        this._setOption('neckHeight', value);
    }
    /**
     * Specifies the ratio between the width of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is "dynamicHeight".
     */
    get neckWidth() {
        return this._getOption('neckWidth');
    }
    set neckWidth(value) {
        this._setOption('neckWidth', value);
    }
    /**
     * Sets the palette to be used to colorize funnel items.
     */
    get palette() {
        return this._getOption('palette');
    }
    set palette(value) {
        this._setOption('palette', value);
    }
    /**
     * Specifies what to do with colors in the palette when their number is less than the number of funnel items.
     */
    get paletteExtensionMode() {
        return this._getOption('paletteExtensionMode');
    }
    set paletteExtensionMode(value) {
        this._setOption('paletteExtensionMode', value);
    }
    /**
     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.
     */
    get pathModified() {
        return this._getOption('pathModified');
    }
    set pathModified(value) {
        this._setOption('pathModified', value);
    }
    /**
     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.
     */
    get redrawOnResize() {
        return this._getOption('redrawOnResize');
    }
    set redrawOnResize(value) {
        this._setOption('redrawOnResize', value);
    }
    /**
     * Specifies how item labels should behave when they overlap.
     */
    get resolveLabelOverlapping() {
        return this._getOption('resolveLabelOverlapping');
    }
    set resolveLabelOverlapping(value) {
        this._setOption('resolveLabelOverlapping', value);
    }
    /**
     * Switches the widget to a right-to-left representation.
     */
    get rtlEnabled() {
        return this._getOption('rtlEnabled');
    }
    set rtlEnabled(value) {
        this._setOption('rtlEnabled', value);
    }
    /**
     * Specifies whether a single or multiple funnel items can be in the selected state at a time. Assigning "none" disables the selection feature.
     */
    get selectionMode() {
        return this._getOption('selectionMode');
    }
    set selectionMode(value) {
        this._setOption('selectionMode', value);
    }
    /**
     * Specifies the widget's size in pixels.
     */
    get size() {
        return this._getOption('size');
    }
    set size(value) {
        this._setOption('size', value);
    }
    /**
     * Specifies whether to sort funnel items.
     */
    get sortData() {
        return this._getOption('sortData');
    }
    set sortData(value) {
        this._setOption('sortData', value);
    }
    /**
     * Sets the name of the theme the widget uses.
     */
    get theme() {
        return this._getOption('theme');
    }
    set theme(value) {
        this._setOption('theme', value);
    }
    /**
     * Configures the widget's title.
     */
    get title() {
        return this._getOption('title');
    }
    set title(value) {
        this._setOption('title', value);
    }
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.
     */
    get tooltip() {
        return this._getOption('tooltip');
    }
    set tooltip(value) {
        this._setOption('tooltip', value);
    }
    /**
     * Specifies which data source field provides values for funnel items. The value defines a funnel item's area.
     */
    get valueField() {
        return this._getOption('valueField');
    }
    set valueField(value) {
        this._setOption('valueField', value);
    }
    _createInstance(element, options) {
        return new DxFunnel(element, options);
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('dataSource', changes);
        this.setupChanges('palette', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('dataSource');
        this._idh.doCheck('palette');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxFunnelComponent.ɵfac = function DxFunnelComponent_Factory(t) { return new (t || DxFunnelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxFunnelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxFunnelComponent, selectors: [["dx-funnel"]], inputs: { adaptiveLayout: "adaptiveLayout", algorithm: "algorithm", argumentField: "argumentField", colorField: "colorField", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", export: "export", hoverEnabled: "hoverEnabled", inverted: "inverted", item: "item", label: "label", legend: "legend", loadingIndicator: "loadingIndicator", margin: "margin", neckHeight: "neckHeight", neckWidth: "neckWidth", palette: "palette", paletteExtensionMode: "paletteExtensionMode", pathModified: "pathModified", redrawOnResize: "redrawOnResize", resolveLabelOverlapping: "resolveLabelOverlapping", rtlEnabled: "rtlEnabled", selectionMode: "selectionMode", size: "size", sortData: "sortData", theme: "theme", title: "title", tooltip: "tooltip", valueField: "valueField" }, outputs: { onDisposing: "onDisposing", onDrawn: "onDrawn", onExported: "onExported", onExporting: "onExporting", onFileSaving: "onFileSaving", onHoverChanged: "onHoverChanged", onIncidentOccurred: "onIncidentOccurred", onInitialized: "onInitialized", onItemClick: "onItemClick", onLegendClick: "onLegendClick", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", adaptiveLayoutChange: "adaptiveLayoutChange", algorithmChange: "algorithmChange", argumentFieldChange: "argumentFieldChange", colorFieldChange: "colorFieldChange", dataSourceChange: "dataSourceChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", exportChange: "exportChange", hoverEnabledChange: "hoverEnabledChange", invertedChange: "invertedChange", itemChange: "itemChange", labelChange: "labelChange", legendChange: "legendChange", loadingIndicatorChange: "loadingIndicatorChange", marginChange: "marginChange", neckHeightChange: "neckHeightChange", neckWidthChange: "neckWidthChange", paletteChange: "paletteChange", paletteExtensionModeChange: "paletteExtensionModeChange", pathModifiedChange: "pathModifiedChange", redrawOnResizeChange: "redrawOnResizeChange", resolveLabelOverlappingChange: "resolveLabelOverlappingChange", rtlEnabledChange: "rtlEnabledChange", selectionModeChange: "selectionModeChange", sizeChange: "sizeChange", sortDataChange: "sortDataChange", themeChange: "themeChange", titleChange: "titleChange", tooltipChange: "tooltipChange", valueFieldChange: "valueFieldChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxFunnelComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {  display: block; }"] });
DxFunnelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "adaptiveLayout", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "algorithm", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "argumentField", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "colorField", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "dataSource", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "export", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "hoverEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "inverted", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "item", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "label", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "legend", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "loadingIndicator", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "margin", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFunnelComponent.prototype, "neckHeight", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFunnelComponent.prototype, "neckWidth", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "palette", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "paletteExtensionMode", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "pathModified", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "redrawOnResize", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "resolveLabelOverlapping", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "rtlEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "selectionMode", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFunnelComponent.prototype, "sortData", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "theme", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "title", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFunnelComponent.prototype, "tooltip", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFunnelComponent.prototype, "valueField", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onDrawn", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onExported", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onExporting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onFileSaving", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onHoverChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onIncidentOccurred", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onLegendClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "onSelectionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "adaptiveLayoutChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "algorithmChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "argumentFieldChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "colorFieldChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "dataSourceChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "exportChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "hoverEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "invertedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "itemChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "labelChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "legendChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "loadingIndicatorChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "marginChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "neckHeightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "neckWidthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "paletteChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "paletteExtensionModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "pathModifiedChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "redrawOnResizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "resolveLabelOverlappingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "rtlEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "selectionModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "sizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "sortDataChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "themeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "titleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "tooltipChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFunnelComponent.prototype, "valueFieldChange", void 0);
DxFunnelComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxFunnelComponent);
let DxFunnelModule = class DxFunnelModule {
};
DxFunnelModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxFunnelModule });
DxFunnelModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxFunnelModule_Factory(t) { return new (t || DxFunnelModule)(); }, imports: [[
            DxoAdaptiveLayoutModule,
            DxoExportModule,
            DxoItemModule,
            DxoBorderModule,
            DxoHoverStyleModule,
            DxoHatchingModule,
            DxoSelectionStyleModule,
            DxoLabelModule,
            DxoConnectorModule,
            DxoFontModule,
            DxoFormatModule,
            DxoLegendModule,
            DxoMarginModule,
            DxoTitleModule,
            DxoSubtitleModule,
            DxoLoadingIndicatorModule,
            DxoSizeModule,
            DxoTooltipModule,
            DxoShadowModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoAdaptiveLayoutModule,
        DxoExportModule,
        DxoItemModule,
        DxoBorderModule,
        DxoHoverStyleModule,
        DxoHatchingModule,
        DxoSelectionStyleModule,
        DxoLabelModule,
        DxoConnectorModule,
        DxoFontModule,
        DxoFormatModule,
        DxoLegendModule,
        DxoMarginModule,
        DxoTitleModule,
        DxoSubtitleModule,
        DxoLoadingIndicatorModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoShadowModule,
        DxTemplateModule] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxFunnelComponent, [{
        type: Component,
        args: [{
                selector: 'dx-funnel',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ],
                styles: [' :host {  display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { adaptiveLayout: [{
            type: Input
        }], algorithm: [{
            type: Input
        }], argumentField: [{
            type: Input
        }], colorField: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], disabled: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], export: [{
            type: Input
        }], hoverEnabled: [{
            type: Input
        }], inverted: [{
            type: Input
        }], item: [{
            type: Input
        }], label: [{
            type: Input
        }], legend: [{
            type: Input
        }], loadingIndicator: [{
            type: Input
        }], margin: [{
            type: Input
        }], neckHeight: [{
            type: Input
        }], neckWidth: [{
            type: Input
        }], palette: [{
            type: Input
        }], paletteExtensionMode: [{
            type: Input
        }], pathModified: [{
            type: Input
        }], redrawOnResize: [{
            type: Input
        }], resolveLabelOverlapping: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], size: [{
            type: Input
        }], sortData: [{
            type: Input
        }], theme: [{
            type: Input
        }], title: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], valueField: [{
            type: Input
        }], onDisposing: [{
            type: Output
        }], onDrawn: [{
            type: Output
        }], onExported: [{
            type: Output
        }], onExporting: [{
            type: Output
        }], onFileSaving: [{
            type: Output
        }], onHoverChanged: [{
            type: Output
        }], onIncidentOccurred: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onItemClick: [{
            type: Output
        }], onLegendClick: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], adaptiveLayoutChange: [{
            type: Output
        }], algorithmChange: [{
            type: Output
        }], argumentFieldChange: [{
            type: Output
        }], colorFieldChange: [{
            type: Output
        }], dataSourceChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], exportChange: [{
            type: Output
        }], hoverEnabledChange: [{
            type: Output
        }], invertedChange: [{
            type: Output
        }], itemChange: [{
            type: Output
        }], labelChange: [{
            type: Output
        }], legendChange: [{
            type: Output
        }], loadingIndicatorChange: [{
            type: Output
        }], marginChange: [{
            type: Output
        }], neckHeightChange: [{
            type: Output
        }], neckWidthChange: [{
            type: Output
        }], paletteChange: [{
            type: Output
        }], paletteExtensionModeChange: [{
            type: Output
        }], pathModifiedChange: [{
            type: Output
        }], redrawOnResizeChange: [{
            type: Output
        }], resolveLabelOverlappingChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], selectionModeChange: [{
            type: Output
        }], sizeChange: [{
            type: Output
        }], sortDataChange: [{
            type: Output
        }], themeChange: [{
            type: Output
        }], titleChange: [{
            type: Output
        }], tooltipChange: [{
            type: Output
        }], valueFieldChange: [{
            type: Output
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFunnelModule, { declarations: function () { return [DxFunnelComponent]; }, imports: function () { return [DxoAdaptiveLayoutModule,
        DxoExportModule,
        DxoItemModule,
        DxoBorderModule,
        DxoHoverStyleModule,
        DxoHatchingModule,
        DxoSelectionStyleModule,
        DxoLabelModule,
        DxoConnectorModule,
        DxoFontModule,
        DxoFormatModule,
        DxoLegendModule,
        DxoMarginModule,
        DxoTitleModule,
        DxoSubtitleModule,
        DxoLoadingIndicatorModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoShadowModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxFunnelComponent,
        DxoAdaptiveLayoutModule,
        DxoExportModule,
        DxoItemModule,
        DxoBorderModule,
        DxoHoverStyleModule,
        DxoHatchingModule,
        DxoSelectionStyleModule,
        DxoLabelModule,
        DxoConnectorModule,
        DxoFontModule,
        DxoFormatModule,
        DxoLegendModule,
        DxoMarginModule,
        DxoTitleModule,
        DxoSubtitleModule,
        DxoLoadingIndicatorModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoShadowModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxFunnelModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoAdaptiveLayoutModule,
                    DxoExportModule,
                    DxoItemModule,
                    DxoBorderModule,
                    DxoHoverStyleModule,
                    DxoHatchingModule,
                    DxoSelectionStyleModule,
                    DxoLabelModule,
                    DxoConnectorModule,
                    DxoFontModule,
                    DxoFormatModule,
                    DxoLegendModule,
                    DxoMarginModule,
                    DxoTitleModule,
                    DxoSubtitleModule,
                    DxoLoadingIndicatorModule,
                    DxoSizeModule,
                    DxoTooltipModule,
                    DxoShadowModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxFunnelComponent
                ],
                exports: [
                    DxFunnelComponent,
                    DxoAdaptiveLayoutModule,
                    DxoExportModule,
                    DxoItemModule,
                    DxoBorderModule,
                    DxoHoverStyleModule,
                    DxoHatchingModule,
                    DxoSelectionStyleModule,
                    DxoLabelModule,
                    DxoConnectorModule,
                    DxoFontModule,
                    DxoFormatModule,
                    DxoLegendModule,
                    DxoMarginModule,
                    DxoTitleModule,
                    DxoSubtitleModule,
                    DxoLoadingIndicatorModule,
                    DxoSizeModule,
                    DxoTooltipModule,
                    DxoShadowModule,
                    DxTemplateModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DxFunnelComponent, DxFunnelModule };

//# sourceMappingURL=devextreme-angular-ui-funnel.js.map